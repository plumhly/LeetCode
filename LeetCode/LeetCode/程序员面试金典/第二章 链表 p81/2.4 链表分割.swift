//
//  2.4 ÈìæË°®ÂàÜÂâ≤.swift
//  ÁÆóÊ≥ï
//
//  Created by Plum on 2020/8/11.
//  Copyright ¬© 2020 Plum. All rights reserved.
//

import Foundation
/*
 2.4 ÈìæË°®ÂàÜÂâ≤
 
 ÁºñÂÜôÁ®ãÂ∫è‰ª•xÂàÜÂâ≤ÈìæË°®Ôºå‰ΩøÂæóÂ∞è‰∫éxÁöÑËäÇÁÇπÊéíÂú®Â§ß‰∫éÊàñËÄÖÁ≠â‰∫éxÁöÑËäÇÁÇπ‰πãÂâç„ÄÇ
 ÂÆû‰æãÔºö
 ËæìÂÖ•: head = 1->4->3->2->5->2, x = 3
 ËæìÂá∫: 1->2->2->4->3->5
 */

/*
 ‚ö†Ô∏è ÈúÄË¶ÅËøîÂõûÊñ∞ÁöÑnode!!!!
 */
struct Interview_2_4 {
    
    /*
     Ëß£ÂÜ≥ÊÄùË∑ØÔºö
     1. ÈúÄË¶Å‰∏â‰∏™ÊåáÈíàÔºå‰∏Ä‰∏™ÊòØÁî®Êù•ÈÅçÂéÜÔºå‰∏Ä‰∏™Áî®Êù•ÊåáÂêë‰∏ä‰∏Ä‰∏™ËäÇÁÇπÔºå‰∏Ä‰∏™Áî®Êù•Ë°®Á§∫Â∞è‰∫éËØ•Êï∞ÁöÑnodeÊï¥ÁêÜÂêéÁöÑÊú´Â∞æ
     */
    struct Solution1 {
        static func separate(list: Node, separator: Int) -> Node? {
            var smallStart: Node? = nil
            var smallNode: Node? = nil
            var largeNode: Node? = list
            var largeNodePre: Node? = nil
            while largeNode != nil {
                let value = largeNode!.value
                if value < separator {
                    if smallNode == nil {
                        // ‰∏çÊòØÂ§¥ÁªìÁÇπ
                        if largeNode !== list {
                            let largeNext = largeNode?.next
                            
                            // Êñ≠Èô§‰∏ä‰∏Ä‰∏™ËäÇÁÇπÁöÑÂºïÁî®
                            largeNodePre?.next = nil
                            
                            // ÊääËØ•ËäÇÁÇπÂΩìÂÅöÂ§¥ÁªìÁÇπ
                            largeNode?.next = list
                            
                            // Ê†áËÆ∞Â∞èËäÇÁÇπ
                            smallNode = largeNode
                            
                            //ËÆ∞ÂΩïÂ§¥ÁªìÁÇπ
                            smallStart = smallNode
                            
                            // ËøòÂéülargeNode
                            largeNode = largeNext
                            
                        } else {
                            // ÊòØÂ§¥ÁªìÁÇπ
                            smallNode = largeNode
                            //ËÆ∞ÂΩïÂ§¥ÁªìÁÇπ
                            smallStart = smallNode
                            
                            largeNode = largeNode?.next
                            largeNodePre = largeNode
                        }
                        
                    } else {
                        // ËÆ∞ÂΩï‰∏ã‰∏Ä‰∏™ËäÇÁÇπ
                        let largeNext = largeNode?.next
                        // ‰∏äÁ∫ßËäÇÁÇπ
                        largeNodePre?.next = largeNext
                        
                        // ÊèíÂÖ•Âà∞Â∞èËäÇÁÇπ
                        largeNode?.next = smallNode?.next
                        smallNode?.next = largeNode
                        
                        // ÁßªÂä®largeËäÇÁÇπ
                        largeNode = largeNext
                    }
                } else {
                    largeNodePre = largeNode
                    largeNode = largeNode?.next
                }
            }
            
            return smallStart == nil ? list : smallNode
        }
    }
    
    /*
     Ëß£Ê≥ïÂàÜÊûêÔºö
     1. Áî®5‰∏™ÊåáÈíàÔºå1‰∏™Áî®Êù•ÈÅçÂéÜÔºå 1ÂØπÁî®Êù•Áª¥Êä§Â∞è‰∫éseparatorÁöÑÈìæË°®Ôºå1ÂØπÁî®Êù•Áª¥Êä§Â§ß‰∫éÁ≠â‰∫éseparatorÁöÑÈìæË°®ÔºåÁÑ∂ÂêéÂêàÂπ∂„ÄÇ
     Ê≥®ÊÑèÁÇπÔºö
     1. ËØ•ÊñπÊ≥ïË¶ÅÊääÈÅçÂéÜÂèòÈáèÁöÑ next = nil, Êñπ‰æøÈáçÁªÑ
     */
    struct Solution2 {
        static func separate(list: Node, separator: Int) -> Node? {
            var node: Node? = list
            var beforeStart: Node? = nil
            var beforeEnd: Node? = nil
            var afterStart: Node? = nil
            var afterEnd: Node? = nil
            
            while node != nil {
                let next = node?.next
                // ÂèòÊàêÂçïÁã¨ÁöÑnode
                node?.next = nil
                if node!.value < separator {
                    if beforeStart == nil {
                        beforeStart = node
                    } else {
                        beforeEnd?.next = node
                    }
                    beforeEnd = node
                } else {
                    if afterStart == nil {
                        afterStart = node
                    } else {
                        afterEnd?.next = node
                        
                    }
                    afterEnd = node
                }
                
                node = next
            }
            
            if beforeStart == nil {
               return afterStart
            }
            
            beforeEnd?.next = afterStart
            return beforeStart
        }
    }
    
    
    /*
     Ëß£Ê≥ïÂàÜÊûêÔºö
     1. ‰∏â‰∏™ÊåáÈíàÔºå1‰∏™Áî®‰∫éÈÅçÂéÜ„ÄÇ‰∏Ä‰∏™Áî®‰∫éËÆ∞ÂΩïÂ∞è‰∫éÊï∞ÁªÑÊàêÈìæË°®ÔºåÊèíÂÖ•ÁöÑÊñπÊ≥ïÔºö‰πãÂâçÂèëÁé∞ÁöÑÂêåÁªÑÊï∞ÁªÑÊàêÁöÑÈìæË°®Ôºå‰Ωú‰∏∫Êñ∞ÂèëÁé∞ÁöÑnext (Â§¥ÊèíÊ≥ï)Ôºå Â§ß‰∫é‰πüÊòØ‰∏ÄÊ†∑
     
     Ê≥®ÊÑèÁÇπÔºö
     1. smallStartÈÅçÂéÜË¶ÅÁî®‰∏Ä‰∏™Êñ∞ÁöÑindexÔºå smallStartÈìæË°®‰ºöË¢´‰∏çÊñ≠ËµãÂÄºÔºåËÄåsmallStartÊ≤°ÊúâÂÖ∂‰ªñÂèòÈáèÊåÅÊúâ
     2. ËøôÈáåÂøÖÈ°ªË¶ÅËøîÂõûÊñ∞ÁöÑnode
     */
    struct Solution3 {
        static func separate(list: Node, separator: Int) -> Node? {
            var node: Node? = list
            
            var smallStart: Node? = nil
            var largeStart: Node? = nil
            while node != nil {
                let next = node?.next
                if node!.value < separator {
                    node?.next = smallStart
                    smallStart = node
                } else {
                    node?.next = largeStart
                    largeStart = node
                }
                node = next
            }
            
            guard smallStart != nil else {
                return largeStart
            }
            
            guard largeStart != nil else {
                return smallStart
            }
            
            // ËøôÈáå‰∏çËÉΩÁßªÂä®smallStartÔºåÂéüÂõ†ÊòØÁßªÂä®‰πãÂêéÔºå‰πãÂâçÁöÑnodeÂ∞±‰ºöË¢´ÈáäÊîæÔºåÈúÄË¶Å‰∏Ä‰∏™Êñ∞ÁöÑÁ¥¢Âºï
            var index = smallStart
            while let next = index?.next {
                index = next
            }
            
            index?.next = largeStart
            return smallStart
        }
    }
    
    
    /**
     üèÜ
     Ëß£Ê≥ïÂàÜÊûêÔºö
     Áî®3‰∏™ÊåáÈíàÔºå1‰∏™ÈÅçÂéÜÔºå‰∏Ä‰∏™ÊåáÂêëhead,1‰∏™ÊåáÂêëtail„ÄÇ‰∏ÄÊó¶ÂèëÁé∞Â∞è‰∫éÁöÑÊï∞ÔºåÂ∞±‰ªéÂ§¥ÊèíÂÖ•ÔºåÂ¶ÇÊûúÂ§ß‰∫éÁöÑÊï∞Ôºå‰ªéÂ∞æÊèíÂÖ•„ÄÇ
     
     Ê≥®ÊÑèÔºö
     1. ÂºïÁî®Á±ªÂûãÊåáÈíàÁöÑÊìç‰ΩúÂíåËµãÂÄº„ÄÇnode.next = node, ÊòØÊäänextÊåáÈíàÊåáÂêëËá™Â∑±ÔºåÊûÑÊàê‰∏Ä‰∏™ÁéØ
     2. ‰∏ÄÂÆöË¶ÅÊâßË°å tail.next = nil.Ôºå Âõ†‰∏∫Â∞è‰∫éÁöÑÊï∞Âú®ÁßªÂä®Âà∞Â§¥ÈÉ®ÊòØÔºåÂèØËÉΩÂÆÉÊòØtailÁöÑnext
     */
    struct Solution4 {
        static func separate(list: Node, separator: Int) -> Node? {
            var node: Node? = list
            var head: Node? = list
            var tail: Node? = list
            while node != nil {
                let next = node?.next
                if node!.value < separator {
                    node?.next = head
                    head = node
                } else {
                    tail?.next = node
                    tail = node
                }
                node = next
            }
            tail?.next = nil
            return head
        }
    }
    
    static func test() {
        do {
            let node1 = Node(value: 1, next: nil)
            let node2_1 = Node(value: 2, next: nil)
            let node2_2 = Node(value: 2, next: nil)
            let node3 = Node(value: 3, next: nil)
            let node4 = Node(value: 4, next: nil)
            let node5 = Node(value: 5, next: nil)
            
            node1.next = node4
            node4.next = node3
            node3.next = node2_1
            node2_1.next = node5
            node5.next = node2_2
            let node = Solution1.separate(list: node1, separator: 3)
            assert(node?.values == [1, 2, 2, 4, 3, 5])
            print("Interview_2_4 Solution1 OVER")
        }
        
        do {
            let node1 = Node(value: 1, next: nil)
            let node2_1 = Node(value: 2, next: nil)
            let node2_2 = Node(value: 2, next: nil)
            let node3 = Node(value: 3, next: nil)
            let node4 = Node(value: 4, next: nil)
            let node5 = Node(value: 5, next: nil)
            
            node1.next = node4
            node4.next = node3
            node3.next = node2_1
            node2_1.next = node5
            node5.next = node2_2
            let node = Solution2.separate(list: node1, separator: 3)
            assert(node?.values == [1, 2, 2, 4, 3, 5])
            print("Interview_2_4 Solution2 OVER")
        }
        
        do {
            let node1 = Node(value: 1, next: nil)
            let node2_1 = Node(value: 2, next: nil)
            let node2_2 = Node(value: 2, next: nil)
            let node3 = Node(value: 3, next: nil)
            let node4 = Node(value: 4, next: nil)
            let node5 = Node(value: 5, next: nil)
            
            node1.next = node4
            node4.next = node3
            node3.next = node2_1
            node2_1.next = node5
            node5.next = node2_2
            let node = Solution3.separate(list: node1, separator: 3)
            assert(node?.values == [2, 2, 1, 5, 3, 4])
            print("Interview_2_4 Solution3 OVER")
        }
        
        do {
            let node1 = Node(value: 1, next: nil)
            let node2_1 = Node(value: 2, next: nil)
            let node2_2 = Node(value: 2, next: nil)
            let node3 = Node(value: 3, next: nil)
            let node4 = Node(value: 4, next: nil)
            let node5 = Node(value: 5, next: nil)
            
            node1.next = node4
            node4.next = node3
            node3.next = node2_1
            node2_1.next = node5
            node5.next = node2_2
            let node = Solution4.separate(list: node1, separator: 3)
            assert(node?.values == [2, 2, 1, 5, 3, 4])
            print("Interview_2_4 Solution4 OVER")
        }
        
    }
}
