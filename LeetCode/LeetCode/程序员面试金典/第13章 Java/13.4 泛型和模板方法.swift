//
//  13.4 泛型和模板方法.swift
//  算法
//
//  Created by Plum on 2021/6/3.
//  Copyright © 2021 Plum. All rights reserved.
//

import Foundation

/**
 * P365
 *
 * 13.3 泛型和模板，C++模板方法和Java泛型一样吗？
 *
 *Java泛型的实现基于“类型消除”这一概念。当源代码被转换成Java虚拟机字节码时,这种技术会消除参数化类型。
 *在C++中,模板本质上就是一套宏指今集,只是换了个名头 编译器会针对每种类型创建一份模板代码的副本有项证据可以证明这一点:Myclass<foo>不会与 myclassar共享静态变量。然而,两个 Myclass<foo>实例则会共享静态变量
 *
 * 1. C+模板可以使用int等基本数据类型。Java则不行,必 integer须转而使用
 * 2. 在Java中,可以将模板的类型参数限定为某种特定类型。例如,你可能会使用泛型实现Carddeck,并规定类型参数必须扩展自 Cardgame
 * 3. 在C+中,类型参数可以实例化,但Java不支持。
 * 4. 在Java中,类型参数(即 Myclass<foo>中的Foo)不能用于静态方法和变量,因为它型参数可以用于静态方法和静态变量。因为它们会被 Myclass<foo>和 Myclass<ar>所共享。在C+中,这些类都是不同的,因此类型参数可以用于静态方法和静态变量
 * 5. 在Java中,不管类型参数是什么, Myclass的所有实例都是同一类型。类型参数会在运行时被抹去。在C++中,参数类型不同,实例类型也不同。
 *
 */
