//
//  10.6 大文件的排序.swift
//  算法
//
//  Created by Plum on 2021/5/30.
//  Copyright © 2021 Plum. All rights reserved.
//

import Foundation

/*
 P338
 
 10.6大文件排序。设想你有个20GB的文件,每行有一个字符串,请述一下将如何对这个
 文件进行排序。(提示:207)
 */

/*
 外排序的一个例子是外归并排序（External merge sort），它读入一些能放在内存内的数据量，在内存中排序后输出为一个顺串（即是内部数据有序的临时文件），处理完所有的数据后再进行归并。[1][2]比如，要对900 MB的数据进行排序，但机器上只有100 MB的可用内存时，外归并排序按如下方法操作：
 1 读入100 MB的数据至内存中，用某种常规方式（如快速排序、堆排序、归并排序等方法）在内存中完成排序。
 2 将排序完成的数据写入磁盘。
 3 读入每个临时文件（顺串）的前10 MB（ = 100 MB / (9块 + 1)）的数据放入内存中的输入缓冲区，最后的10 MB作为输出缓冲区。（实践中，将输入缓冲适当调小，而适当增大输出缓冲区能获得更好的效果。）
 4 执行九路归并算法，将结果输出到输出缓冲区。一旦输出缓冲区满，将缓冲区中的数据写出至目标文件，清空缓冲区。一旦9个输入缓冲区中的一个变空，就从这个缓冲区关联的文件，读入下一个10M数据，除非这个文件已读完。这是“外归并排序”能在主存外完成排序的关键步骤 -- 因为“归并算法”(merge algorithm)对每一个大块只是顺序地做一轮访问(进行归并)，每个大块不用完全载入主存。
 为了增加每一个有序的临时文件的长度，可以采用置换选择排序（Replacement selection sorting）。它可以产生大于内存大小的顺串。具体方法是在内存中使用一个最小堆进行排序，设该最小堆的大小为M M。算法描述如下：
 1. 初始时将输入文件读入内存，建立最小堆。
 2. 将堆顶元素输出至输出缓冲区。然后读入下一个记录：
 3 若该元素的关键码值不小于刚输出的关键码值，
    a 将其作为堆顶元素并调整堆，使之满足堆的性质；
    b 否则将新元素放入堆底位置，将堆的大小减1。
 4 重复第2步，直至堆大小变为0。
 此时一个顺串已经产生。将堆中的所有元素建堆，开始生成下一个顺串。[3]
 此方法能生成平均长度为2M的顺串，可以进一步减少访问外部存储器的次数，节约时间，提高算法效率。
 */

/// 理解：置换选择排序 保证输出到输出缓冲区的是最小的，当堆为0，那么该零时文件排序完成，此时将堆构建小顶堆，创建下一个零时文件
